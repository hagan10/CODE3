<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
targetNamespace="http://in28minutes.com/courses" 
xmlns:tns="http://in28minutes.com/courses" elementFormDefault="qualified">
	<!-- We're saying - the request can contain an element called "GetCourseDetailsRequest" -->
	<xs:element name = "GetCourseDetailsRequest">
		<!-- When an element can contain another element, you have to create a "complex type" -->
		<!-- We can define the structure here - what should be inside the complex type? An element called id -->
		<xs:complexType>
			<xs:sequence>
				<xs:element name="id" type="integer"/>
			</xs:sequence>	
		</xs:complexType>
	</xs:element>
	
	<xs:element name = "GetCourseDetailsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="courseDetails" type="tns:CourseDetails"/>
			</xs:sequence>	
		</xs:complexType>
	</xs:element>
	
	
<!-- 	Making this so we could reuse it in the future. By creating a separate complex type, we can reuse the definition of whatever we have created-->
	<xs:element name = "GetAllCourseDetailsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="courseDetails" type="tns:CourseDetails"/>
			</xs:sequence>	
		</xs:complexType>
	</xs:element>
	
	
	<xs:complexType name="CourseDetails"
		<xs:sequence> 
<!-- 			<element name="id" type="integer"</element> You can shorten the end of this line as shown below-->
			<xs:element name="id" type="xs:integer"/>
			<xs:element name="name" type="xs:string"/>
			<xs:element name="description" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>	
	
	
</xs:schema>